@page "/"
@using Dagucar.Services
@using System.Collections.ObjectModel
@using Dagucar.Services.EventArgs
@using BluetoothAdapter = MintPlayer.Maui.Bluetooth.BluetoothAdapter;
@using BluetoothDevice = MintPlayer.Maui.Bluetooth.BluetoothDevice;

@* @inject IBluetoothService bluetoothService; *@

<h1>Hello, world!</h1>

Welcome to your new app.

<span class="input-group">
    @{
        if (isDiscovering)
        {
            <button class="btn btn-secondary" @onclick="StopDiscovery">Stop Discovery</button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="StartDiscovery">Start Discovery</button>
        }
    }
</span>
<h2 class="my-2">Bonded devices</h2>
<ul class="list-group">
    @foreach (var device in bondedDevices)
    {
        <li class="list-group-item" @onclick="() => ConnectToDevice(device)">@device.DeviceName</li>
    }
</ul>
<h2 class="my-2">Devices nearby</h2>
<ul class="list-group">
    @foreach (var device in discoveredDevices)
    {
        <li class="list-group-item" @onclick="() => CreateDeviceBond(device)">@device.DeviceName</li>
    }
</ul>

@code
{
    private bool isDiscovering = false;
    private BluetoothAdapter? bluetoothAdapter;
    private ObservableCollection<BluetoothDevice> bondedDevices = new();
    private ObservableCollection<BluetoothDevice> discoveredDevices = new();

    public Home()
    {
    }

    bool eventsSetup;
    protected override async void OnInitialized()
    {
        if (!eventsSetup)
        {
            bluetoothAdapter = await BluetoothAdapter.GetDefaultAdapter();

            // bluetoothService.GotPermissions += OnGotPermissions;
            // bluetoothService.DiscoveryStarted += OnDiscoveryStarted;
            // bluetoothService.DeviceFound += OnDeviceFound;
            // bluetoothService.DiscoveryFinished += OnDiscoveryFinished;
            // bluetoothService.BondStateChanged += OnBondStateChanged;
            eventsSetup = true;
        }

        // var bondedDevices = await bluetoothService.GetBondedDevices();
        // foreach (var device in bondedDevices)
        //     this.bondedDevices.Add(device);
    }

    // ~Home()
    // {
    //     bluetoothService.GotPermissions -= OnGotPermissions;
    //     bluetoothService.DiscoveryStarted -= OnDiscoveryStarted;
    //     bluetoothService.DeviceFound -= OnDeviceFound;
    //     bluetoothService.DiscoveryFinished -= OnDiscoveryFinished;
    // }

    private async Task StartDiscovery()
    {
        isDiscovering = true;
        await BluetoothAdapter.RequestPermissions();
    }

    public async void OnGotPermissions(object? sender, EventArgs e)
    {
        await bluetoothAdapter.StartDiscovery();
    }

    public void OnDiscoveryStarted(object? sender, EventArgs e)
    {
        discoveredDevices.Clear();
        // StateHasChanged();
    }

    private async void OnDeviceFound(object? sender, DeviceDiscoveredEventArgs e)
    {
        await InvokeAsync(() =>
        {
            discoveredDevices.Add(e.Device);
            StateHasChanged(); // Have to do this before the UI updates
        });
    }

    private async void OnDiscoveryFinished(object? sender, EventArgs e)
    {
        await InvokeAsync(() =>
        {
            isDiscovering = false;
            StateHasChanged(); // Have to do this before the UI updates
        });
    }

    private async void StopDiscovery()
    {
        if (bluetoothAdapter != null)
            await bluetoothAdapter.StopDiscovery();
    }

    private async void CreateDeviceBond(BluetoothDevice? device)
    {
        if (device != null)
            await device.CreateBond();
    }
    
    private async void OnBondStateChanged(object? sender, BondStateChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            switch (e.NewState)
            {
                case BondState.Bonded:
                    bondedDevices.Add(e.Device);
                    break;
                case BondState.None:
                    bondedDevices.Remove(e.Device);
                    break;
            }
        });
    }

    private async void ConnectToDevice(BluetoothDevice? device)
    {
        if (device != null)
            await device.Connect();
    }
}
