@page "/"
@using Dagucar.Services
@using System.Collections.ObjectModel

@inject IBluetoothService bluetoothService;

<h1>Hello, world!</h1>

Welcome to your new app.

<span class="input-group">
    @{
        if (isDiscovering)
        {
            <button class="btn btn-secondary" @onclick="StopDiscovery">Stop Discovery</button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="StartDiscovery">Start Discovery</button>
        }
    }
</span>
<h2>Found devices</h2>
<ul class="list-group">
    @foreach (var device in devices)
    {
        <li class="list-group-item" @onclick="() => CreateBond(device)">@device.Name</li>
    }
</ul>
<h2>Bonded devices</h2>
<ul class="list-group">
    @foreach (var device in bondedDevices)
    {
        <li class="list-group-item" @onclick="() => ConnectToDevice(device)">@device.Name</li>
    }
</ul>

@code
{
    private bool isDiscovering = false;
    private ObservableCollection<BluetoothDevice> devices = new();
    private ObservableCollection<BluetoothDevice> bondedDevices = new();

    override protected async Task OnInitializedAsync()
    {
        this.bondedDevices.Clear();
        var bondedDevices = await bluetoothService.GetBondedDevices();
        foreach (var device in bondedDevices)
            this.bondedDevices.Add(device);
    }

    private async Task StartDiscovery()
    {
        isDiscovering = true;
        devices.Clear();
        await Task.Delay(10);
        var success = await bluetoothService.StartDiscovery(OnDeviceDiscovered, OnDiscoveryFinished);
    }

    private async Task OnDeviceDiscovered(BluetoothDevice device)
    {
        await InvokeAsync(() =>
        {
            devices.Add(device);
            StateHasChanged(); // Have to do this before the UI updates
        });
    }

    private async Task OnDiscoveryFinished()
    {
        await InvokeAsync(() =>
        {
            isDiscovering = false;
            StateHasChanged(); // Have to do this before the UI updates
        });
    }

    private async Task StopDiscovery()
    {
        var cancelled = await bluetoothService.StopDiscovery();
        // Why do i need to call this?
        await OnDiscoveryFinished();
    }

    private async Task CreateBond(BluetoothDevice device)
    {
        await bluetoothService.CreateBond(device);
    }

    private async Task ConnectToDevice(BluetoothDevice device)
    {
        // await bluetoothService.CreateBond(device);
    }
}
